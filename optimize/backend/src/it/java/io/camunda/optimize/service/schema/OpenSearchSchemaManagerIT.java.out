/*
 * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
 * one or more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * Licensed under the Camunda License 1.0. You may not use this file
 * except in compliance with the Camunda License 1.0.
 */
// TODO recreate C8 IT equivalent of this with #13337
// package io.camunda.optimize.service.schema;
//
// import static io.camunda.optimize.AbstractIT.OPENSEARCH_PASSING;
// import static io.camunda.optimize.ApplicationContextProvider.getBean;
// import static io.camunda.optimize.service.db.DatabaseConstants.METADATA_INDEX_NAME;
// import static
// io.camunda.optimize.service.db.es.schema.ElasticSearchSchemaManager.INDEX_EXIST_BATCH_SIZE;
// import static io.camunda.optimize.service.util.mapper.ObjectMapperFactory.OPTIMIZE_MAPPER;
// import static jakarta.ws.rs.HttpMethod.HEAD;
// import static org.assertj.core.api.Assertions.assertThat;
// import static org.mockserver.model.HttpRequest.request;
// import static org.mockserver.verify.VerificationTimes.exactly;
//
// import com.fasterxml.jackson.annotation.JsonAutoDetect;
// import com.fasterxml.jackson.annotation.PropertyAccessor;
// import com.fasterxml.jackson.core.JsonProcessingException;
// import com.fasterxml.jackson.databind.ObjectMapper;
// import io.camunda.optimize.rest.engine.dto.ProcessInstanceEngineDto;
// import io.camunda.optimize.service.db.os.OptimizeOpenSearchClient;
// import io.camunda.optimize.service.db.os.schema.OpenSearchIndexSettingsBuilder;
// import io.camunda.optimize.service.db.os.schema.OpenSearchSchemaManager;
// import io.camunda.optimize.service.db.os.schema.index.ProcessDefinitionIndexOS;
// import io.camunda.optimize.service.db.os.schema.index.ProcessInstanceIndexOS;
// import io.camunda.optimize.service.db.os.schema.index.report.SingleDecisionReportIndexOS;
// import io.camunda.optimize.service.db.schema.IndexMappingCreator;
// import io.camunda.optimize.service.db.schema.index.ProcessInstanceIndex;
// import io.camunda.optimize.service.schema.type.MyUpdatedEventIndex;
// import io.camunda.optimize.service.schema.type.MyUpdatedEventIndexOS;
// import io.camunda.optimize.service.util.configuration.ConfigurationService;
// import io.camunda.optimize.util.BpmnModels;
// import java.io.IOException;
// import java.lang.reflect.Field;
// import java.util.ArrayList;
// import java.util.Collections;
// import java.util.List;
// import java.util.Objects;
// import java.util.stream.Collectors;
// import org.junit.jupiter.api.Tag;
// import org.junit.jupiter.api.Test;
// import org.junit.jupiter.api.condition.EnabledIfSystemProperty;
// import org.mockserver.integration.ClientAndServer;
// import org.opensearch.client.json.JsonpSerializable;
// import org.opensearch.client.opensearch._types.OpenSearchException;
// import org.opensearch.client.opensearch.indices.GetFieldMappingRequest;
// import org.opensearch.client.opensearch.indices.GetFieldMappingResponse;
// import org.opensearch.client.opensearch.indices.GetIndicesSettingsResponse;
// import org.opensearch.client.opensearch.indices.IndexSettings;
// import org.opensearch.client.opensearch.indices.IndexSettings.Builder;
// import org.opensearch.client.opensearch.indices.PutIndicesSettingsRequest;
// import org.opensearch.client.opensearch.indices.PutIndicesSettingsResponse;
// import org.opensearch.client.opensearch.indices.get_field_mapping.TypeFieldMappings;
//
// // We can unfortunately not use constants in this expression, so it needs to be the literal text
// // "opensearch".
// @EnabledIfSystemProperty(named = "CAMUNDA_OPTIMIZE_DATABASE", matches = "opensearch")
// @Tag(OPENSEARCH_PASSING)
// public class OpenSearchSchemaManagerIT extends AbstractSchemaManagerIT {
//
//   @Test
//   public void doNotFailIfSomeIndexesAlreadyExist() {
//     // given
//     initializeSchema();
//
//     embeddedOptimizeExtension
//         .getOptimizeDatabaseClient()
//         .deleteIndex(
//             indexNameService.getOptimizeIndexAliasForIndex(new SingleDecisionReportIndexOS()));
//
//     // when
//     initializeSchema();
//
//     // then
//     assertThat(getSchemaManager().schemaExists(getOpenSearchOptimizeClient())).isTrue();
//   }
//
//   @Test
//   public void optimizeIndexExistsAfterSchemaInitialization() {
//     // when
//     initializeSchema();
//     assertThat(getSchemaManager().indexExists(getOpenSearchOptimizeClient(),
// METADATA_INDEX_NAME))
//         .isTrue();
//   }
//
//   @Test
//   public void allTypesExistsAfterSchemaInitialization() throws IOException {
//     // when
//     initializeSchema();
//
//     // then
//     final List<IndexMappingCreator<IndexSettings.Builder>> mappings =
//         getSchemaManager().getMappings();
//     assertThat(mappings).hasSize(28);
//     for (IndexMappingCreator<IndexSettings.Builder> mapping : mappings) {
//       assertIndexExists(mapping.getIndexName());
//     }
//     final GetIndicesSettingsResponse getSettingsResponse = getIndexSettingsFor(mappings);
//     assertMappingSettings(mappings, getSettingsResponse);
//   }
//
//   @Test
//   public void mappingsAreUpdated() throws IOException {
//     // given schema is created
//     initializeSchema();
//
//     // when there is a new mapping and I update the mapping
//     IndexMappingCreator<IndexSettings.Builder> myUpdatedEventIndex = new MyUpdatedEventIndexOS();
//     try {
//       getSchemaManager().addMapping(myUpdatedEventIndex);
//       initializeSchema();
//
//       // then the mapping contains the new fields
//       assertThatNewFieldExists();
//     } finally {
//       getSchemaManager().getMappings().remove(myUpdatedEventIndex);
//     }
//   }
//
//   @Test
//   public void dynamicSettingsAreUpdated() throws IOException {
//     // given schema exists
//     initializeSchema();
//
//     // with a different dynamic setting than default
//     final List<IndexMappingCreator<IndexSettings.Builder>> mappings =
//         getSchemaManager().getMappings();
//     modifyDynamicIndexSetting(mappings);
//
//     // when
//     initializeSchema();
//
//     // then the settings contain values from configuration
//     final GetIndicesSettingsResponse getSettingsResponse = getIndexSettingsFor(mappings);
//     assertMappingSettings(mappings, getSettingsResponse);
//   }
//
//   @Test
//   public void indexExistCheckIsPerformedInBatches() {
//     // given
//     final int expectedExistQueryBatchExecutionCount =
//         (int) Math.ceil((double) getSchemaManager().getMappings().size() /
// INDEX_EXIST_BATCH_SIZE);
//     assertThat(expectedExistQueryBatchExecutionCount).isGreaterThan(1);
//     final ClientAndServer dbMockServer = useAndGetDbMockServer();
//
//     // when
//     embeddedOptimizeExtension
//         .getDatabaseSchemaManager()
//         .schemaExists(embeddedOptimizeExtension.getOptimizeDatabaseClient());
//
//     // then the index exist check was performed in batches
//     dbMockServer.verify(
//         request()
//             .withPath(
//                 String.format(
//                     "/(%s.*){2,%s}",
//                     embeddedOptimizeExtension
//                         .getOptimizeDatabaseClient()
//                         .getIndexNameService()
//                         .getIndexPrefix(),
//                     INDEX_EXIST_BATCH_SIZE))
//             .withMethod(HEAD),
//         exactly(expectedExistQueryBatchExecutionCount));
//   }
//
//   @Test
//   public void dynamicSettingsAreAppliedToStaticIndices() throws IOException {
//     final String oldRefreshInterval =
//         embeddedOptimizeExtension
//             .getConfigurationService()
//             .getOpenSearchConfiguration()
//             .getRefreshInterval();
//     final int oldReplicaCount =
//         embeddedOptimizeExtension
//             .getConfigurationService()
//             .getOpenSearchConfiguration()
//             .getNumberOfReplicas();
//     final int oldNestedDocumentLimit =
//         embeddedOptimizeExtension
//             .getConfigurationService()
//             .getOpenSearchConfiguration()
//             .getNestedDocumentsLimit();
//
//     // given schema exists
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setRefreshInterval("100s");
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setNumberOfReplicas(2);
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setNestedDocumentsLimit(10);
//
//     // when
//     initializeSchema();
//
//     // then the settings contain the updated dynamic values
//     final GetIndicesSettingsResponse getSettingsResponse =
//         getIndexSettingsFor(Collections.singletonList(new ProcessDefinitionIndexOS()));
//     final String indexName =
//         indexNameService.getOptimizeIndexNameWithVersion(new ProcessDefinitionIndexOS());
//     final IndexSettings settings =
//         Objects.requireNonNull(getSettingsResponse.result().get(indexName).settings()).index();
//     assert settings != null;
//     assert settings.refreshInterval() != null;
//     assertThat(settings.refreshInterval()._toJsonString()).isEqualTo("100s");
//     assertThat(settings.numberOfReplicas()).isEqualTo("2");
//     assert settings.mapping() != null;
//     assert settings.mapping().nestedObjects() != null;
//     assertThat(settings.mapping().nestedObjects().limit()).isEqualTo(10L);
//
//     // cleanup
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setRefreshInterval(oldRefreshInterval);
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setNumberOfReplicas(oldReplicaCount);
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setNestedDocumentsLimit(oldNestedDocumentLimit);
//     initializeSchema();
//   }
//
//   @Test
//   public void dynamicSettingsAreAppliedToExistingDynamicIndices() throws IOException {
//     final String oldRefreshInterval =
//         embeddedOptimizeExtension
//             .getConfigurationService()
//             .getOpenSearchConfiguration()
//             .getRefreshInterval();
//     final int oldReplicaCount =
//         embeddedOptimizeExtension
//             .getConfigurationService()
//             .getOpenSearchConfiguration()
//             .getNumberOfReplicas();
//     final int oldNestedDocumentLimit =
//         embeddedOptimizeExtension
//             .getConfigurationService()
//             .getOpenSearchConfiguration()
//             .getNestedDocumentsLimit();
//
//     // given a dynamic index is created by the import of process instance data
//     final ProcessInstanceEngineDto processInstanceEngineDto =
//         engineIntegrationExtension.deployAndStartProcess(BpmnModels.getSimpleBpmnDiagram());
//     importAllEngineEntitiesFromScratch();
//     // then the dynamic index settings are changed
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setRefreshInterval("100s");
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setNumberOfReplicas(2);
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setNestedDocumentsLimit(10);
//
//     // when
//     initializeSchema();
//
//     // then the settings contain the updated dynamic values
//     final ProcessInstanceIndex<IndexSettings.Builder> dynamicIndex =
//         new ProcessInstanceIndexOS(processInstanceEngineDto.getProcessDefinitionKey());
//     final GetIndicesSettingsResponse getSettingsResponse =
//         getIndexSettingsFor(Collections.singletonList(dynamicIndex));
//     final String indexName = indexNameService.getOptimizeIndexNameWithVersion(dynamicIndex);
//     final IndexSettings settings =
//         Objects.requireNonNull(getSettingsResponse.result().get(indexName).settings()).index();
//     assert settings != null;
//     assert settings.refreshInterval() != null;
//     assertThat(settings.refreshInterval()._toJsonString()).isEqualTo("100s");
//     assertThat(settings.numberOfReplicas()).isEqualTo("2");
//     assert settings.mapping() != null;
//     assert settings.mapping().nestedObjects() != null;
//     assertThat(settings.mapping().nestedObjects().limit()).isEqualTo(10L);
//
//     // cleanup
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setRefreshInterval(oldRefreshInterval);
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setNumberOfReplicas(oldReplicaCount);
//     embeddedOptimizeExtension
//         .getConfigurationService()
//         .getOpenSearchConfiguration()
//         .setNestedDocumentsLimit(oldNestedDocumentLimit);
//     initializeSchema();
//   }
//
//   @Test
//   public void dynamicSettingsAreUpdatedForExistingIndexesWhenNewIndexesAreCreated()
//       throws IOException {
//     // given schema exists
//     initializeSchema();
//
//     // with a different dynamic setting than default
//     final List<IndexMappingCreator<IndexSettings.Builder>> mappings =
//         getSchemaManager().getMappings();
//     modifyDynamicIndexSetting(mappings);
//
//     // one index is missing so recreating of indexes is triggered
//     embeddedOptimizeExtension
//         .getOptimizeDatabaseClient()
//         .deleteIndex(
//             indexNameService.getOptimizeIndexAliasForIndex(new SingleDecisionReportIndexOS()));
//
//     // when
//     initializeSchema();
//
//     // then the settings contain values from configuration
//     final GetIndicesSettingsResponse getSettingsResponse = getIndexSettingsFor(mappings);
//     assertMappingSettings(mappings, getSettingsResponse);
//   }
//
//   @Override
//   protected void initializeSchema() {
//     getSchemaManager().initializeSchema(getOpenSearchOptimizeClient());
//   }
//
//   @Override
//   protected Class<? extends Exception> expectedDatabaseExtensionStatusException() {
//     return OpenSearchException.class;
//   }
//
//   private static IndexSettings buildStaticSettings(
//       IndexMappingCreator<IndexSettings.Builder> indexMappingCreator,
//       ConfigurationService configurationService)
//       throws IOException {
//     IndexSettings.Builder builder = new IndexSettings.Builder();
//     builder = indexMappingCreator.getStaticSettings(builder, configurationService);
//     return builder.build();
//   }
//
//   protected OpenSearchSchemaManager getSchemaManager() {
//     return getBean(OpenSearchSchemaManager.class);
//   }
//
//   private void assertThatNewFieldExists() throws IOException {
//     final String aliasForIndex =
//         indexNameService.getOptimizeIndexAliasForIndex(METADATA_INDEX_NAME);
//     GetFieldMappingRequest.Builder request =
//         new GetFieldMappingRequest.Builder()
//             .index(aliasForIndex)
//             .fields(MyUpdatedEventIndexOS.MY_NEW_FIELD);
//     GetFieldMappingResponse response =
//         getOpenSearchOptimizeClient()
//             .getOpenSearchClient()
//             .indices()
//             .getFieldMapping(request.build());
//     final MyUpdatedEventIndex<Builder> updatedEventType = new MyUpdatedEventIndexOS();
//     TypeFieldMappings mapping =
//
// response.result().get(indexNameService.getOptimizeIndexNameWithVersion(updatedEventType));
//     assertThat(mapping.mappings().get(MyUpdatedEventIndex.MY_NEW_FIELD)).isNotNull();
//   }
//
//   private void assertMappingSettings(
//       final List<IndexMappingCreator<IndexSettings.Builder>> mappings,
//       final GetIndicesSettingsResponse getSettingsResponse)
//       throws IOException {
//     for (IndexMappingCreator<IndexSettings.Builder> mapping : mappings) {
//       IndexSettings dynamicSettings =
//           OpenSearchIndexSettingsBuilder.buildDynamicSettings(
//               embeddedOptimizeExtension.getConfigurationService());
//       List<String> dynamicFieldsToCheck = getNonNullFieldNames(dynamicSettings);
//       IndexSettings dynamicSettingsForIndex =
//           Objects.requireNonNull(
//                   getSettingsResponse
//                       .get(indexNameService.getOptimizeIndexNameWithVersion(mapping))
//                       .settings())
//               .index();
//       dynamicFieldsToCheck.forEach(
//           settingName -> {
//             assertThat(settingIsEqual(dynamicSettings, dynamicSettingsForIndex, settingName))
//                 .as("Dynamic setting %s of index %s", settingName, mapping.getIndexName())
//                 .isTrue();
//           });
//
//       IndexSettings staticSettings =
//           buildStaticSettings(mapping, embeddedOptimizeExtension.getConfigurationService());
//       List<String> staticFieldsToCheck = getNonNullFieldNames(staticSettings);
//       IndexSettings staticSettingsForIndex =
//           Objects.requireNonNull(
//                   getSettingsResponse
//                       .get(indexNameService.getOptimizeIndexNameWithVersion(mapping))
//                       .settings())
//               .index();
//       staticFieldsToCheck.forEach(
//           settingName -> {
//             assertThat(settingIsEqual(staticSettings, staticSettingsForIndex, settingName))
//                 .as("Static setting %s of index %s", settingName, mapping.getIndexName())
//                 .isTrue();
//           });
//     }
//   }
//
//   private GetIndicesSettingsResponse getIndexSettingsFor(
//       final List<IndexMappingCreator<IndexSettings.Builder>> mappings) throws IOException {
//     final String indices =
//         mappings.stream()
//             .map(indexNameService::getOptimizeIndexNameWithVersion)
//             .collect(Collectors.joining(","));
//
//     return getOpenSearchOptimizeClient()
//         .getOpenSearchClient()
//         .indices()
//         .getSettings(s -> s.index(indices));
//   }
//
//   private void modifyDynamicIndexSetting(
//       final List<IndexMappingCreator<IndexSettings.Builder>> mappings) throws IOException {
//     for (IndexMappingCreator<IndexSettings.Builder> mapping : mappings) {
//       final String indexName = indexNameService.getOptimizeIndexNameWithVersion(mapping);
//
//       final PutIndicesSettingsRequest indexUpdateRequest =
//           new PutIndicesSettingsRequest.Builder()
//               .index(indexName)
//               .settings(new IndexSettings.Builder().maxNgramDiff(10).build())
//               .build();
//       final PutIndicesSettingsResponse response;
//       response =
//           getOpenSearchOptimizeClient()
//               .getOpenSearchClient()
//               .indices()
//               .putSettings(indexUpdateRequest);
//       assert (response.acknowledged());
//     }
//   }
//
//   private OptimizeOpenSearchClient getOpenSearchOptimizeClient() {
//     return (OptimizeOpenSearchClient) prefixAwareDatabaseClient;
//   }
//
//   private static List<String> getNonNullFieldNames(Object object) {
//     List<String> nonNullFields = new ArrayList<>();
//     if (object == null) {
//       return nonNullFields;
//     }
//
//     Class<?> clazz = object.getClass();
//
//     while (clazz != null) { // Iterate through all fields in the class and its superclasses
//       Field[] fields = clazz.getDeclaredFields();
//       for (Field field : fields) {
//         field.setAccessible(true); // Set the field accessible to read private fields
//         try {
//           Object value = field.get(object);
//           if (value != null) {
//             nonNullFields.add(field.getName());
//           }
//         } catch (IllegalAccessException e) {
//           throw new OptimizeRuntimeException("Unable to access field value", e);
//         }
//       }
//       clazz = clazz.getSuperclass(); // Move to the superclass to check its fields
//     }
//
//     return nonNullFields;
//   }
//
//   private static Object getFieldValue(Object object, String fieldName) {
//     if (object == null) {
//       throw new IllegalArgumentException("The object provided is null");
//     }
//     try {
//       Class<?> clazz = object.getClass();
//       Field field = clazz.getDeclaredField(fieldName);
//       field.setAccessible(true); // Set the field accessible to read private fields
//       return field.get(object);
//     } catch (NoSuchFieldException e) {
//       System.err.println("Field not found: " + fieldName);
//     } catch (IllegalAccessException e) {
//       System.err.println("Cannot access the field: " + fieldName);
//     }
//     return null; // Return null if field not found or if there is an access problem
//   }
//
//   public static boolean settingIsEqual(
//       IndexSettings expectedSettings, IndexSettings actualSettings, String settingName) {
//     Object expected = getFieldValue(expectedSettings, settingName);
//     Object actual = getFieldValue(actualSettings, settingName);
//     // This handles the case for primitive types and strings
//     if ((expected == null && actual == null) || (expected != null && expected.equals(actual))) {
//       return true;
//     }
//     // If this is reached, expected cannot be null
//     if (actual == null) {
//       return false;
//     }
//     if (expected instanceof JsonpSerializable expectedJsonp) {
//       if (actual instanceof JsonpSerializable actualJsonp) {
//         ObjectMapper mapper = OPTIMIZE_MAPPER;
//         try {
//           mapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);
//           String json1 = mapper.writeValueAsString(expectedJsonp);
//           String json2 = mapper.writeValueAsString(actualJsonp);
//           return json1.equalsIgnoreCase(json2);
//         } catch (JsonProcessingException e) {
//           return false;
//         }
//       } else {
//         return false;
//       }
//     }
//     return false;
//   }
// }
