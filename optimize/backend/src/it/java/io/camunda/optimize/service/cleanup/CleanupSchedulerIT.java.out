/*
 * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
 * one or more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * Licensed under the Camunda License 1.0. You may not use this file
 * except in compliance with the Camunda License 1.0.
 */
// TODO recreate C8 IT equivalent of this with #13337
// package io.camunda.optimize.service.cleanup;
//
// import static io.camunda.optimize.AbstractIT.OPENSEARCH_PASSING;
// import static org.assertj.core.api.Assertions.assertThat;
//
// import io.camunda.optimize.AbstractPlatformIT;
// import io.camunda.optimize.service.util.configuration.cleanup.CleanupConfiguration;
// import java.util.stream.Stream;
// import lombok.AllArgsConstructor;
// import lombok.Builder;
// import lombok.Data;
// import org.junit.jupiter.api.Tag;
// import org.junit.jupiter.api.Test;
// import org.junit.jupiter.params.ParameterizedTest;
// import org.junit.jupiter.params.provider.MethodSource;
//
// @Tag(OPENSEARCH_PASSING)
// public class CleanupSchedulerIT extends AbstractPlatformIT {
//
//   @Test
//   public void verifyDisabledByDefault() {
//     assertThat(getCleanupServiceConfiguration().isEnabled()).isFalse();
//     assertThat(getCleanupScheduler().isScheduledToRun()).isFalse();
//   }
//
//   @ParameterizedTest
//   @MethodSource("atLeastOneEnabledScenarios")
//   public void verifyCleanupScheduledWhenAtLeastOneCleanupEnabled(
//       final CleanupTestConfiguration configuration) {
//     // given
//     assertThat(getCleanupServiceConfiguration().isEnabled()).isFalse();
//     assertThat(getCleanupScheduler().isScheduledToRun()).isFalse();
//
//     // when
//     getCleanupServiceConfiguration()
//         .getProcessDataCleanupConfiguration()
//         .setEnabled(configuration.processCleanupEnabled);
//     getCleanupServiceConfiguration()
//         .getDecisionCleanupConfiguration()
//         .setEnabled(configuration.decisionCleanupEnabled);
//     getCleanupServiceConfiguration()
//         .getIngestedEventCleanupConfiguration()
//         .setEnabled(configuration.ingestedEventCleanupEnabled);
//     embeddedOptimizeExtension.reloadConfiguration();
//
//     // then
//     assertThat(getCleanupServiceConfiguration().isEnabled()).isTrue();
//     assertThat(getCleanupScheduler().isScheduledToRun()).isTrue();
//   }
//
//   public static Stream<CleanupTestConfiguration> atLeastOneEnabledScenarios() {
//     return Stream.of(
//         CleanupTestConfiguration.builder()
//             .processCleanupEnabled(true)
//             .decisionCleanupEnabled(false)
//             .ingestedEventCleanupEnabled(false)
//             .build(),
//         CleanupTestConfiguration.builder()
//             .processCleanupEnabled(false)
//             .decisionCleanupEnabled(true)
//             .ingestedEventCleanupEnabled(false)
//             .build(),
//         CleanupTestConfiguration.builder()
//             .processCleanupEnabled(false)
//             .decisionCleanupEnabled(false)
//             .ingestedEventCleanupEnabled(true)
//             .build(),
//         CleanupTestConfiguration.builder()
//             .processCleanupEnabled(false)
//             .decisionCleanupEnabled(true)
//             .ingestedEventCleanupEnabled(true)
//             .build(),
//         CleanupTestConfiguration.builder()
//             .processCleanupEnabled(true)
//             .decisionCleanupEnabled(true)
//             .ingestedEventCleanupEnabled(true)
//             .build());
//   }
//
//   @Test
//   public void testCleanupIsScheduledSuccessfully() {
//     getCleanupScheduler().startCleanupScheduling();
//     try {
//       assertThat(getCleanupScheduler().isScheduledToRun()).isTrue();
//     } finally {
//       getCleanupScheduler().stopCleanupScheduling();
//     }
//   }
//
//   @Test
//   public void testCleanupScheduledStoppedSuccessfully() {
//     getCleanupScheduler().startCleanupScheduling();
//     getCleanupScheduler().stopCleanupScheduling();
//     assertThat(getCleanupScheduler().isScheduledToRun()).isFalse();
//   }
//
//   private CleanupConfiguration getCleanupServiceConfiguration() {
//     return embeddedOptimizeExtension.getConfigurationService().getCleanupServiceConfiguration();
//   }
//
//   private CleanupScheduler getCleanupScheduler() {
//     return embeddedOptimizeExtension.getCleanupScheduler();
//   }
//
//   @Builder
//   @Data
//   private static class CleanupTestConfiguration {
//     private final boolean processCleanupEnabled;
//     private final boolean decisionCleanupEnabled;
//     private final boolean ingestedEventCleanupEnabled;
//   }
// }
